1. 什么是网络
网络就是一种辅助双方或者多方能够连接在一起的工具
如果没有网络可想单机的世界是多么的孤单

2. 使用网络的目的
就是为了联通多方然后进行通信的，即把数据从一方传递给另一方
前面的学习编写的程序都是单机的，即不能和其他电脑上的程序进行通信
为了让在不同的电脑上运行的软件已经能够互相传递数据就需要借助网络的功能

备注：
	局域网/互联网
	无数局域网构成互联网

3.ip	
	局域网通过IP进行传输，标记地址
	用来标记网络上的一台电脑，比如192.168.1.1；在本地局域网是唯一的

	linux : 查看ip ifconfig     关闭/打开ip  ipconfig ens0 down/up
	windows: 查看ip ipconfig     



	ip的分类
	ipv4:
	xxx.xxx.xxx.xxx  (192.168.2.1)  值为0~255 ,一共可以256^4个地址  按区域划分到家
	1.  A类
		前3组数用来标记网络地址   最后一组用来标记主机
		ip地址=网络号+主机号
		一个网络好最多能容纳254个主机（0和255不能用来标记电脑）
	2.  B类
		前2组数用来标记网络地址   后2组用来标记主机
		ip地址=网络号+主机号
		一个网络好最多能容纳256*256个主机
	3.	C类
		前1组数用来标记网络地址   后3组用来标记主机
		ip地址=网络号+主机号
		一个网络好最多能容纳256*256*256个主机
	4.  D类
		一般用于广播多点网络地址用来寻址一组计算机
	5.  E类
		为将来保留

	ipv6:
	fe80::20c:29ff:fef8:35bc/64    未来趋势

4.	端口号：
	ip地址只是把你的电脑标记了，但是信息传送到电脑还得选择指定的软件发送，这个时候端口号就诞生了，端口号是CPU在运行软件的时候给不同软件的唯一标记，同一台电脑也通过端口号进行信息的传输。

	在信息进行传输的时候传输的地址变成了
	IP地址+端口号
	例如：192.168.1.2：8080


	程序运行起来就叫做进程
	网络通信也就是不同的电脑的进程之间进行数据交换

	端口分类
	1.知名端口
		知名端口是众所周知的端口号，范围从0到1023
		80端分配给HTTP服务
		21端口分配给FTP服务
	2.动态端口
		动态端口的范围是从1024到65535
		之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。
		动态分配是指当一个系统程序或应用程序程序需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。
		当这个程序关闭时，同时也就释放了所占用的端口号
	3.怎样查看端口
		用"netstat - an" 查看端口状态
		lsof -i[tcp/udp]:2425

	总结：
	端口有什么用呢？我们知道，一台拥有IP地址的主机可以提供许多服务，比如HTTP（万维网服务)、FTP（文件传输）、SMTP（电子邮件）等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP地址与网络服务的关系是一对多的关系。实际上是通过IP地址+端口号来区分不同的服务的。需要注意的是，端口并不是一一对应的。比如你的电脑作为客户机访问一台WWW服务器时，WWW服务器使用80端口与你的电脑通信，但你的电脑则可能使用“3457”这样的端口。


5.  socket
	1. 不同电脑进程直接如何通信
	首要解决的问题是如何唯一标识一个进程，否则通信无从谈起!
	在1台电脑上可以通过进程号(PID)来唯一标识一个进程，但是在网络中这是行不通的。
	其实TCP/IP协议族已经帮我们解决了这个问题，网络层的"ip地址"可以唯一标识网络中的主机，而传输层的"协议+端口"可以唯一标识主机中的应用进程
	这样利用IP+协议+端口就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其他进程进行教书


#创建一个tcp socket(tcp套接字)
import socket

# 创建tcp的套接字
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# socket.AF_INET  使用ipv4协议
# socket.SOCK_STREAM  指TCP

# ... 这里是使用套接字的功能(省略)...

# 不用的时候，关闭套接字
s.close()


#创建一个udp socket(udp套接字)
import socket

# 创建tcp的套接字
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# socket.AF_INET  使用ipv4协议
# socket.SOCK_DGRAM  指UDP

# ... 这里是使用套接字的功能(省略)...

# 不用的时候，关闭套接字
s.close()

说明:
套接字使用流程与文件的使用流程很类似
	1. 创建socket
	2. 使用socket
	3. 关闭socket